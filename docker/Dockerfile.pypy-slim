# this build argument must be defined _before_ FROM, so the value is available in FROM.
# however, CROSSBAR_ARCH will _not_ be available further down the line because of this ordering!
ARG CROSSBAR_ARCH

FROM multiarch/qemu-user-static:x86_64-aarch64 as qemu
FROM multiarch/qemu-user-static:x86_64-arm as qemuarm
# PyPy only comes in 3.7 for now
FROM ${CROSSBAR_ARCH}/pypy:3.7-slim

MAINTAINER The Crossbar.io Project <support@crossbario.com>

# these build arguments should be defined _after_ FROM, so the values are available later on
ARG CROSSBAR_BUILD_ID
ARG CROSSBAR_BUILD_DATE
ARG CROSSBAR_VCS_REF
ARG CROSSBAR_VERSION

# while these are defined, and we copy over to env vars (available in container at run-time)
ENV CROSSBAR_BUILD_ID $CROSSBAR_BUILD_ID
ENV CROSSBAR_BUILD_DATE $CROSSBAR_BUILD_DATE
ENV CROSSBAR_VCS_REF $CROSSBAR_VCS_REF
ENV CROSSBAR_VERSION $CROSSBAR_VERSION

# we bindly copy over qemu deps for all archs regardless of arch
COPY --from=qemu /usr/bin/qemu-aarch64-static /usr/bin/
COPY --from=qemuarm /usr/bin/qemu-arm-static /usr/bin/

# http://bugs.python.org/issue19846
# > At the moment, setting "LANG=C" on a Linux system *fundamentally breaks Python 3*, and that's not OK.
ENV LANG C.UTF-8
ENV DEBIAN_FRONTEND noninteractive
ENV PYTHONUNBUFFERED 1

# ensure local pypy is preferred over distribution pypy
ENV PATH /opt/pypy/bin:$PATH

# cross-compatibility with CPython
RUN ln -s /opt/pypy/bin/pypy3 /opt/pypy/bin/python3
RUN ln -s /opt/pypy/bin/pypy3 /opt/pypy/bin/python

# Use Bash (yes, we want bash for both building the image, and later inside containers)
# https://github.com/moby/moby/issues/7281#issuecomment-389440503
SHELL ["/bin/bash", "-c"]

RUN    apt-get update \
    && apt-get install -y --no-install-recommends \
               ca-certificates \
               procps \
               iputils-ping \
               net-tools \
               htop \
               curl \
               expat \
               build-essential \
               libssl-dev \
               libffi-dev \
               libunwind-dev \
               libreadline-dev \
               zlib1g-dev \
               libbz2-dev \
               libsqlite3-dev \
               libncurses5-dev \
               libsnappy-dev \
    && rm -rf ~/.cache \
    && rm -rf /var/lib/apt/lists/*

# Install pip v19.3.1 (yes, absolutely, we do not want the "new resolver" shit)
RUN curl -sSL -o get-pip.py https://bootstrap.pypa.io/get-pip.py && \
    pypy3 get-pip.py \
        --disable-pip-version-check \
        --no-cache-dir \
        "pip<20" && \
    pip --version && \
    rm -f get-pip.py

# install Rust: don't bother with old distro rust (pun), use the source my jedi
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH /root/.cargo/bin:${PATH}
RUN rustc --version

# install vmprof: until it supports arm64, only on amd64
RUN if [ "$CROSSBAR_ARCH" = "amd64" ]; then pip install --no-cache-dir "vmprof>=0.4.12"; fi

# Copy built wheels from host.
# IMPORTANT: there must be exactly one wheel version per packages below
COPY ./.wheels /tmp
RUN ls -la /tmp

RUN pip install --no-cache-dir /tmp/txaio-latest-py2.py3-none-any.whl
RUN pip install --no-cache-dir /tmp/zlmdb-latest-py2.py3-none-any.whl
RUN pip install --no-cache-dir /tmp/autobahn-latest-py2.py3-none-any.whl[asyncio,twisted,encryption,compress,serialization,scram,xbr]
RUN pip install --no-cache-dir /tmp/crossbar-latest-py2.py3-none-any.whl

# Install wheels.
# IMPORTANT: do NOT touch (uses globbing and find to make it work together with pip extras)
# IMPORTANT: we do include autobahn[accelerate] for cpy (but not pypy)
RUN pip install /tmp/txaio-*-py2.py3-none-any.whl && \
    pip install /tmp/zlmdb-*-py2.py3-none-any.whl && \
    pip install `find /tmp/autobahn-*-py2.py3-none-any.whl`[asyncio,twisted,encryption,compress,serialization,scram,xbr] && \
    pip install /tmp/crossbar-*-py2.py3-none-any.whl

# Check versions of CLI
RUN xbrnetwork version && \
    crossbar version

## SETUP RUNTIME ENVIRONMENT #############################################################

# add our user and group
RUN adduser --system --group --uid 242 --home /node crossbar

# Crossbar.io node directory
RUN mkdir -p /node/.crossbar
RUN chown -R crossbar:crossbar /node

# make /node a volume to allow external configuration
VOLUME /node

# set the Crossbar.io node directory as working directory
WORKDIR /node

# run under this user, and expose default port
USER crossbar
EXPOSE 8080 8000

ENTRYPOINT ["crossbar"]
CMD ["start", "--cbdir", "/node/.crossbar", "--loglevel", "info"]
